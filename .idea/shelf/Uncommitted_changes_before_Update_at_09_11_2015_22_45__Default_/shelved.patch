Index: src/main/java/com/ukmaSupport/controllers/Registration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ukmaSupport/controllers/Registration.java	(revision cf1d504609c45b7f57543eb769a9128fa0181644)
+++ src/main/java/com/ukmaSupport/controllers/Registration.java	(revision )
@@ -4,6 +4,7 @@
 import com.ukmaSupport.models.*;
 import com.ukmaSupport.services.interfaces.UserService;
 import com.ukmaSupport.utils.RegistrationValidator;
+import com.ukmaSupport.utils.PasswordEncryptor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Controller;
@@ -22,6 +23,7 @@
     @Autowired
     private RegistrationMail registrationMail;
 
+
     @Autowired
     @Qualifier("registrationValidator")
     private RegistrationValidator validator;
@@ -40,6 +42,7 @@
         validator.validate(user, result);
         if (result.hasErrors())
             return "registration/registration";
+        user = PasswordEncryptor.encrypt(user);
         userDao.saveOrUpdate(user);
         registrationMail.send(user.getEmail());
         return "registration/registrationSuccess";
\ No newline at end of file
Index: src/main/java/com/ukmaSupport/utils/PasswordEncryptor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ukmaSupport/utils/PasswordEncryptor.java	(revision )
+++ src/main/java/com/ukmaSupport/utils/PasswordEncryptor.java	(revision )
@@ -0,0 +1,65 @@
+package com.ukmaSupport.utils;
+
+//this class encrypts passwords using the PBKDF2 algorithm
+
+import com.ukmaSupport.models.User;
+import java.math.BigInteger;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.spec.InvalidKeySpecException;
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.PBEKeySpec;
+
+
+public class PasswordEncryptor {
+    public static User encrypt(User user)
+    {
+        String  originalPassword = user.getPassword();
+        String generatedSecuredPasswordHash = null;
+        try {
+            generatedSecuredPasswordHash = generateStrongPasswordHash(originalPassword);
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (InvalidKeySpecException e) {
+            e.printStackTrace();
+        }
+
+        user.setPassword(generatedSecuredPasswordHash);
+        return user;
+    }
+    static String generateStrongPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException
+    {
+        int iterations = 1000;
+        char[] chars = password.toCharArray();
+        byte[] salt = getSalt().getBytes();
+
+        PBEKeySpec spec = new PBEKeySpec(chars, salt, iterations, 64 * 8);
+        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
+        byte[] hash = skf.generateSecret(spec).getEncoded();
+        return iterations + ":" + toHex(salt) + ":" + toHex(hash);
+    }
+
+    private static String getSalt() throws NoSuchAlgorithmException
+    {
+        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
+        byte[] salt = new byte[16];
+        sr.nextBytes(salt);
+        return salt.toString();
+    }
+
+    private static String toHex(byte[] array) throws NoSuchAlgorithmException
+    {
+        BigInteger bi = new BigInteger(1, array);
+        String hex = bi.toString(16);
+        int paddingLength = (array.length * 2) - hex.length();
+        if(paddingLength > 0)
+        {
+            return String.format("%0"  +paddingLength + "d", 0) + hex;
+        }else{
+            return hex;
+        }
+    }
+
+
+
+}
