Index: src/main/java/com/ukmaSupport/controllers/Registration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ukmaSupport/controllers/Registration.java	(revision 7982f3a7ec2cfdcc6674400537a7f53668726639)
+++ src/main/java/com/ukmaSupport/controllers/Registration.java	(revision )
@@ -4,6 +4,7 @@
 import com.ukmaSupport.models.*;
 import com.ukmaSupport.services.interfaces.UserService;
 import com.ukmaSupport.utils.RegistrationValidator;
+import com.ukmaSupport.utils.PasswordEncryptor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Controller;
@@ -22,6 +23,7 @@
     @Autowired
     private RegistrationMail registrationMail;
 
+
     @Autowired
     @Qualifier("registrationValidator")
     private RegistrationValidator validator;
@@ -39,6 +41,7 @@
         validator.validate(user, result);
         if (result.hasErrors())
             return "registration/registration";
+        user = PasswordEncryptor.encodeUser(user);
         userDao.saveOrUpdate(user);
         registrationMail.send(user.getEmail());
         return "registration/registrationSuccess";
\ No newline at end of file
Index: src/main/java/com/ukmaSupport/services/SpringSecurityEncoder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ukmaSupport/services/SpringSecurityEncoder.java	(revision 7982f3a7ec2cfdcc6674400537a7f53668726639)
+++ src/main/java/com/ukmaSupport/services/SpringSecurityEncoder.java	(revision )
@@ -2,19 +2,123 @@
 
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
+import java.math.BigInteger;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.spec.InvalidKeySpecException;
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.PBEKeySpec;
+import com.ukmaSupport.models.User;
 
 
 
 @Service
 public class SpringSecurityEncoder implements PasswordEncoder {
 
-    @Override
+//the encode method is never called so far
+//but it may be useful later
     public String encode(CharSequence charSequence) {
-        return null;
+
+        String generatedSecuredPasswordHash = null;
+        try {
+            generatedSecuredPasswordHash = generateStrongPasswordHash(charSequence.toString());
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (InvalidKeySpecException e) {
+            e.printStackTrace();
-    }
+        }
 
-    @Override
-    public boolean matches(CharSequence charSequence, String s) {
-        return false;
+        return generatedSecuredPasswordHash;
     }
+
+    public User encodeUser (User user){
+        String pass = user.getPassword();
+        pass = encode (pass);
+        user.setPassword(pass);
+
+
+        return user;
+    }
+    static String generateStrongPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException
+    {
+        int iterations = 1000;
+        char[] chars = password.toCharArray();
+        byte[] salt = getSalt().getBytes();
+
+        PBEKeySpec spec = new PBEKeySpec(chars, salt, iterations, 64 * 8);
+        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
+        byte[] hash = skf.generateSecret(spec).getEncoded();
+        return iterations + ":" + toHex(salt) + ":" + toHex(hash);
+    }
+
+    private static String getSalt() throws NoSuchAlgorithmException
+    {
+        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
+        byte[] salt = new byte[16];
+        sr.nextBytes(salt);
+        return salt.toString();
+    }
+
+    private static String toHex(byte[] array) throws NoSuchAlgorithmException
+    {
+        BigInteger bi = new BigInteger(1, array);
+        String hex = bi.toString(16);
+        int paddingLength = (array.length * 2) - hex.length();
+        if(paddingLength > 0)
+        {
+            return String.format("%0"  +paddingLength + "d", 0) + hex;
+        }else{
+            return hex;
+        }
+    }
+
+
+
+    public boolean matches(CharSequence charSequence, String storedPassword) {
+            String[] parts = storedPassword.split(":");
+            int iterations = Integer.parseInt(parts[0]);
+            byte[] salt = null;
+            try {
+                salt = fromHex(parts[1]);
+            } catch (NoSuchAlgorithmException e) {
+                e.printStackTrace();
+            }
+            byte[] hash = null;
+            try {
+                hash = fromHex(parts[2]);
+            } catch (NoSuchAlgorithmException e) {
+                e.printStackTrace();
+            }
+
+            PBEKeySpec spec = new PBEKeySpec((charSequence.toString()).toCharArray(), salt, iterations, hash.length * 8);
+            SecretKeyFactory skf = null;
+            try {
+                skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
+            } catch (NoSuchAlgorithmException e) {
+                e.printStackTrace();
+            }
+            byte[] testHash = null;
+            try {
+                testHash = skf.generateSecret(spec).getEncoded();
+            } catch (InvalidKeySpecException e) {
+                e.printStackTrace();
+            }
+
+            int diff = hash.length ^ testHash.length;
+            for (int i = 0; i < hash.length && i < testHash.length; i++) {
+                diff |= hash[i] ^ testHash[i];
+            }
+            return diff == 0;
+        }
+
+        private static byte[] fromHex (String hex)throws NoSuchAlgorithmException
+        {
+            byte[] bytes = new byte[hex.length() / 2];
+            for (int i = 0; i < bytes.length; i++) {
+                bytes[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);
+            }
+            return bytes;
+        }
+
+
-}
+    }
Index: src/main/java/com/ukmaSupport/utils/PasswordEncryptor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ukmaSupport/utils/PasswordEncryptor.java	(revision )
+++ src/main/java/com/ukmaSupport/utils/PasswordEncryptor.java	(revision )
@@ -0,0 +1,76 @@
+package com.ukmaSupport.utils;
+
+import java.math.BigInteger;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.spec.InvalidKeySpecException;
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.PBEKeySpec;
+import com.ukmaSupport.models.User;
+
+//this class hashes a user's password
+//for the purpose of savig it
+
+public class PasswordEncryptor {
+
+
+    public static String encode(CharSequence charSequence) {
+
+        String generatedSecuredPasswordHash = null;
+        try {
+            generatedSecuredPasswordHash = generateStrongPasswordHash(charSequence.toString());
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (InvalidKeySpecException e) {
+            e.printStackTrace();
+        }
+
+        return generatedSecuredPasswordHash;
+    }
+
+    public static User encodeUser (User user){
+        String pass = user.getPassword();
+        pass = encode (pass);
+        user.setPassword(pass);
+
+
+        return user;
+    }
+    static String generateStrongPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException
+    {
+        int iterations = 1000;
+        char[] chars = password.toCharArray();
+        byte[] salt = getSalt().getBytes();
+
+        PBEKeySpec spec = new PBEKeySpec(chars, salt, iterations, 64 * 8);
+        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
+        byte[] hash = skf.generateSecret(spec).getEncoded();
+        return iterations + ":" + toHex(salt) + ":" + toHex(hash);
+    }
+
+    private static String getSalt() throws NoSuchAlgorithmException
+    {
+        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
+        byte[] salt = new byte[16];
+        sr.nextBytes(salt);
+        return salt.toString();
+    }
+
+    private static String toHex(byte[] array) throws NoSuchAlgorithmException
+    {
+        BigInteger bi = new BigInteger(1, array);
+        String hex = bi.toString(16);
+        int paddingLength = (array.length * 2) - hex.length();
+        if(paddingLength > 0)
+        {
+            return String.format("%0"  +paddingLength + "d", 0) + hex;
+        }else{
+            return hex;
+        }
+    }
+
+
+
+
+
+}
Index: src/main/webapp/WEB-INF/spring/security.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/spring/security.xml	(revision 7982f3a7ec2cfdcc6674400537a7f53668726639)
+++ src/main/webapp/WEB-INF/spring/security.xml	(revision )
@@ -58,7 +58,7 @@
 
     <authentication-manager>
         <security:authentication-provider user-service-ref="myUserDetailsService">
-            <!--<password-encoder ref="encoder" />-->
+            <password-encoder ref="encoder" />
         </security:authentication-provider>
     </authentication-manager>
 
\ No newline at end of file
